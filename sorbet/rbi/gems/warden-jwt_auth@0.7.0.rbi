# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `warden-jwt_auth` gem.
# Please instead update this file by running `bin/tapioca gem warden-jwt_auth`.

# source://warden-jwt_auth//lib/warden/jwt_auth.rb#8
module Warden
  class << self
    # source://warden/1.2.9/lib/warden.rb#34
    def test_mode!; end
  end
end

# JWT authentication plugin for warden.
#
# It consists of a strategy which tries to authenticate an user decoding a
# token present in the `Authentication` header (as `Bearer %token%`).
# From it, it takes the `sub` claim and provides it to a configured repository
# of users for the current scope.
#
# It also consists of two rack middlewares which perform two actions for
# configured request paths: dispatching a token for a signed in user and
# revoking an incoming token.
#
# source://warden-jwt_auth//lib/warden/jwt_auth.rb#19
module Warden::JWTAuth
  extend ::Dry::Core::Constants
  extend ::Dry::Configurable
  extend ::Dry::Configurable::Methods
  extend ::Dry::Configurable::ClassMethods

  private

  # source://warden-jwt_auth//lib/warden/jwt_auth.rb#33
  def constantize_values(hash); end

  # source://warden-jwt_auth//lib/warden/jwt_auth.rb#22
  def symbolize_keys(hash); end

  # source://warden-jwt_auth//lib/warden/jwt_auth.rb#26
  def upcase_first_items(array); end

  class << self
    # source://warden-jwt_auth//lib/warden/jwt_auth.rb#33
    def constantize_values(hash); end

    # source://warden-jwt_auth//lib/warden/jwt_auth.rb#22
    def symbolize_keys(hash); end

    # source://warden-jwt_auth//lib/warden/jwt_auth.rb#26
    def upcase_first_items(array); end
  end
end

# Helper functions to centralize working with rack env.
#
# It follows
# [rack](http://www.rubydoc.info/github/rack/rack/file/SPEC#The_Environment)
# and [PEP 333](https://www.python.org/dev/peps/pep-0333/#environ-variables)
# conventions.
#
# source://warden-jwt_auth//lib/warden/jwt_auth/env_helper.rb#11
module Warden::JWTAuth::EnvHelper
  class << self
    # Returns header configured through `aud_header` option
    #
    # @param env [Hash] Rack env
    # @return [String]
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/env_helper.rb#55
    def aud_header(env); end

    # Returns HTTP_AUTHORIZATION environment variable
    #
    # @param env [Hash] Rack env
    # @return [String]
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/env_helper.rb#32
    def authorization_header(env); end

    # Returns PATH_INFO environment variable
    #
    # @param env [Hash] Rack env
    # @return [String]
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/env_helper.rb#16
    def path_info(env); end

    # Returns REQUEST_METHOD environment variable
    #
    # @param env [Hash] Rack env
    # @return [String]
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/env_helper.rb#24
    def request_method(env); end

    # Returns a copy of `env` with value added to the `HTTP_AUTHORIZATION`
    # environment variable.
    #
    # Be aware than `env` is not modified in place and still an updated copy
    # is returned.
    #
    # @param env [Hash] Rack env
    # @param value [String]
    # @return [Hash] modified rack env
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/env_helper.rb#45
    def set_authorization_header(env, value); end
  end
end

# source://warden-jwt_auth//lib/warden/jwt_auth/errors.rb#5
module Warden::JWTAuth::Errors; end

# Error raised when the user decoded from a token is nil
#
# source://warden-jwt_auth//lib/warden/jwt_auth/errors.rb#12
class Warden::JWTAuth::Errors::NilUser < ::JWT::DecodeError; end

# Error raised when trying to decode a token that has been revoked for an
# user
#
# source://warden-jwt_auth//lib/warden/jwt_auth/errors.rb#8
class Warden::JWTAuth::Errors::RevokedToken < ::JWT::DecodeError; end

# Error raised when trying to decode a token which `aud` claim does not
# match with the expected one
#
# source://warden-jwt_auth//lib/warden/jwt_auth/errors.rb#22
class Warden::JWTAuth::Errors::WrongAud < ::JWT::DecodeError; end

# Error raised when trying to decode a token for an scope that doesn't
# match the one encoded in the payload
#
# source://warden-jwt_auth//lib/warden/jwt_auth/errors.rb#17
class Warden::JWTAuth::Errors::WrongScope < ::JWT::DecodeError; end

# Helpers to parse token from a request and to a response
#
# source://warden-jwt_auth//lib/warden/jwt_auth/header_parser.rb#6
module Warden::JWTAuth::HeaderParser
  class << self
    # Parses the token from a rack request
    #
    # @param env [Hash] rack env hash
    # @return [String] JWT token
    # @return [nil] if token is not present
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/header_parser.rb#16
    def from_env(env); end

    # Returns a copy of `env` with token added to the `HTTP_AUTHORIZATION`
    # header. Be aware than `env` is not modified in place.
    #
    # @param env [Hash] rack env hash
    # @param token [String] JWT token
    # @return [Hash] modified rack env
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/header_parser.rb#30
    def to_env(env, token); end

    # Returns a copy of headers with token added in the `Authorization` key.
    # Be aware that headers is not modified in place
    #
    # @param headers [Hash] rack hash response headers
    # @param token [String] JWT token
    # @return [Hash] response headers with the token added
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/header_parser.rb#40
    def to_headers(headers, token); end
  end
end

# Method for `Authorization` header. Token is present in request/response
# headers as `Bearer %token%`
#
# source://warden-jwt_auth//lib/warden/jwt_auth/header_parser.rb#9
Warden::JWTAuth::HeaderParser::METHOD = T.let(T.unsafe(nil), String)

# Warden hooks
#
# source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#6
class Warden::JWTAuth::Hooks
  private

  # source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#37
  def add_token_to_env(user, scope, env); end

  # @return [Boolean]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#44
  def jwt_scope?(scope); end

  # source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#23
  def prepare_token(user, auth, opts); end

  # @return [Boolean]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#49
  def request_matches?(path_info, method); end

  # @return [Boolean]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#31
  def token_should_be_added?(scope, env); end

  class << self
    # Adds a token for the signed in user to the request `env` if current path
    # and verb match with configuration. This will be picked up later on by a
    # rack middleware which will add it to the response headers.
    #
    # @see https://github.com/hassox/warden/wiki/Callbacks
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#17
    def after_set_user(user, auth, opts); end
  end
end

# `env` key where JWT is added
#
# source://warden-jwt_auth//lib/warden/jwt_auth/hooks.rb#10
Warden::JWTAuth::Hooks::PREPARED_TOKEN_ENV_KEY = T.let(T.unsafe(nil), String)

# source://warden-jwt_auth//lib/warden/jwt_auth.rb#103
Warden::JWTAuth::Import = T.let(T.unsafe(nil), Dry::AutoInject::Builder)

# Interfaces expected to be implemented in applications working with this
# gem
#
# source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#7
module Warden::JWTAuth::Interfaces; end

# Strategy to manage JWT revocation
#
# source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#45
class Warden::JWTAuth::Interfaces::RevocationStrategy
  # Returns whether a JWT payload is revoked
  #
  # @param _payload [Hash]
  # @param _user [User]
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#59
  def jwt_revoked?(_payload, _user); end

  # Does something to revoke a JWT payload
  #
  # @param _payload [Hash]
  # @param _user [User]
  # @raise [NotImplementedError]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#50
  def revoke_jwt(_payload, _user); end
end

# An user
#
# source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#20
class Warden::JWTAuth::Interfaces::User
  # Allows adding extra claims to be encoded within the payload
  #
  # @return [Hash] claims to be merged with defaults
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#31
  def jwt_payload; end

  # What will be encoded as `sub` claim. It must respond to `#to_s`.
  #
  # @raise [NotImplementedError]
  # @return [#to_s] `sub` claim
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#24
  def jwt_subject; end

  # Does something just after a JWT for the user has been dispatched.
  #
  # @param _token [String]
  # @param _payload [Hash]
  # @raise [NotImplementedError]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#39
  def on_jwt_dispatch(_token, _payload); end
end

# Repository that returns [User]
#
# source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#9
class Warden::JWTAuth::Interfaces::UserRepository
  # Finds and returns an [User]
  #
  # @param _sub [String] JWT sub claim
  # @raise [NotImplementedError]
  # @return [User]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/interfaces.rb#14
  def find_for_jwt_authentication(_sub); end
end

# Simple rack middleware which is just a wrapper for other middlewares which
# actually perform some work.
#
# source://warden-jwt_auth//lib/warden/jwt_auth/middleware/token_dispatcher.rb#5
class Warden::JWTAuth::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware.rb#13
  def initialize(app); end

  # Returns the value of attribute app.
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware.rb#11
  def app; end

  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware.rb#17
  def call(env); end
end

# Revokes a token if it path and method match with configured
#
# source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#7
class Warden::JWTAuth::Middleware::RevocationManager < ::Warden::JWTAuth::Middleware
  # @return [RevocationManager] a new instance of RevocationManager
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#13
  def initialize(app); end

  # Returns the value of attribute app.
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#11
  def app; end

  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#19
  def call(env); end

  # Returns the value of attribute config.
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#11
  def config; end

  # Returns the value of attribute helper.
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#11
  def helper; end

  private

  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#28
  def revoke_token(env); end

  # @return [Boolean]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#37
  def token_should_be_revoked?(path_info, method); end
end

# Debugging key added to `env`
#
# source://warden-jwt_auth//lib/warden/jwt_auth/middleware/revocation_manager.rb#9
Warden::JWTAuth::Middleware::RevocationManager::ENV_KEY = T.let(T.unsafe(nil), String)

# Dispatches a token (adds it to `Authorization` response header) if it
# has been added to the request `env` by [Hooks]
#
# source://warden-jwt_auth//lib/warden/jwt_auth/middleware/token_dispatcher.rb#8
class Warden::JWTAuth::Middleware::TokenDispatcher < ::Warden::JWTAuth::Middleware
  # @return [TokenDispatcher] a new instance of TokenDispatcher
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/token_dispatcher.rb#14
  def initialize(app); end

  # Returns the value of attribute app.
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/token_dispatcher.rb#12
  def app; end

  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/token_dispatcher.rb#18
  def call(env); end

  private

  # source://warden-jwt_auth//lib/warden/jwt_auth/middleware/token_dispatcher.rb#27
  def headers_with_token(env, headers); end
end

# Debugging key added to `env`
#
# source://warden-jwt_auth//lib/warden/jwt_auth/middleware/token_dispatcher.rb#10
Warden::JWTAuth::Middleware::TokenDispatcher::ENV_KEY = T.let(T.unsafe(nil), String)

# Helper functions to deal with user info present in a decode payload
#
# source://warden-jwt_auth//lib/warden/jwt_auth/payload_user_helper.rb#6
module Warden::JWTAuth::PayloadUserHelper
  class << self
    # Returns whether given aud matches with the one encoded in the payload
    #
    # @param payload [Hash] JWT payload
    # @return [Boolean]
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/payload_user_helper.rb#28
    def aud_matches?(payload, aud); end

    # Returns user encoded in given payload
    #
    # @param payload [Hash] JWT payload
    # @return [Interfaces::User] an user, whatever it is
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/payload_user_helper.rb#11
    def find_user(payload); end

    # Returns the payload to encode for a given user in a scope
    #
    # @param user [Interfaces::User] an user, whatever it is
    # @param scope [Symbol] A Warden scope
    # @return [Hash] payload to encode
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/payload_user_helper.rb#37
    def payload_for_user(user, scope); end

    # Returns whether given scope matches with the one encoded in the payload
    #
    # @param payload [Hash] JWT payload
    # @return [Boolean]
    #
    # source://warden-jwt_auth//lib/warden/jwt_auth/payload_user_helper.rb#21
    def scope_matches?(payload, scope); end
  end
end

# Warden strategy to authenticate an user through a JWT token in the
# `Authorization` request header
#
# source://warden-jwt_auth//lib/warden/jwt_auth/strategy.rb#9
class Warden::JWTAuth::Strategy < ::Warden::Strategies::Base
  # source://warden-jwt_auth//lib/warden/jwt_auth/strategy.rb#18
  def authenticate!; end

  # @return [Boolean]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/strategy.rb#14
  def store?; end

  # @return [Boolean]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/strategy.rb#10
  def valid?; end

  private

  # source://warden-jwt_auth//lib/warden/jwt_auth/strategy.rb#28
  def token; end
end

# Decodes a JWT into a hash payload into a JWT token
#
# source://warden-jwt_auth//lib/warden/jwt_auth/token_decoder.rb#6
class Warden::JWTAuth::TokenDecoder
  # Decodes the payload from a JWT as a hash
  #
  # token is invalid
  #
  # @param token [String] a JWT
  # @return [Hash] payload decoded from the JWT
  # @see JWT.decode for all the exceptions than can be raised when given
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/token_decoder.rb#16
  def call(token); end
end

# Encodes a payload into a JWT token, adding some configurable
# claims
#
# source://warden-jwt_auth//lib/warden/jwt_auth/token_encoder.rb#9
class Warden::JWTAuth::TokenEncoder
  # Encodes a payload into a JWT
  #
  # @param payload [Hash] what has to be encoded
  # @return [String] JWT
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/token_encoder.rb#16
  def call(payload); end

  private

  # source://warden-jwt_auth//lib/warden/jwt_auth/token_encoder.rb#23
  def merge_with_default_claims(payload); end
end

# Revokes a JWT using configured revocation strategy
#
# source://warden-jwt_auth//lib/warden/jwt_auth/token_revoker.rb#6
class Warden::JWTAuth::TokenRevoker
  # Revokes the JWT token
  #
  # @param token [String] a JWT
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/token_revoker.rb#12
  def call(token); end
end

# Layer above token decoding which directly decodes a user from a JWT
#
# source://warden-jwt_auth//lib/warden/jwt_auth/user_decoder.rb#8
class Warden::JWTAuth::UserDecoder
  # @return [UserDecoder] a new instance of UserDecoder
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_decoder.rb#13
  def initialize(**args); end

  # Returns the user that is encoded in a JWT. The scope is used to choose
  # the user repository to which send `#find_for_jwt_authentication(sub)`
  # with decoded `sub` claim.
  #
  # encoded user
  # argument
  #
  # @param token [String] a JWT
  # @param aud [String] Expected aud claim
  # @param scope [Symbol] Warden scope
  # @raise [Errors::WrongAud] when encoded aud does not match with aud
  # @raise [Errors::NilUser] when decoded user is nil
  # @raise [Errors::RevokedToken] when token has been revoked for the
  # @raise [Errors::WrongScope] when encoded scope does not match with scope
  # @return [Interfaces::User] an user, whatever it is
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_decoder.rb#32
  def call(token, scope, aud); end

  # Returns the value of attribute helper.
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_decoder.rb#11
  def helper; end

  private

  # @raise [Errors::WrongScope]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_decoder.rb#42
  def check_valid_claims(payload, scope, aud); end

  # @raise [Errors::NilUser]
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_decoder.rb#47
  def check_valid_user(payload, user, scope); end
end

# Layer above token encoding which directly encodes a user to a JWT
#
# source://warden-jwt_auth//lib/warden/jwt_auth/user_encoder.rb#8
class Warden::JWTAuth::UserEncoder
  # @return [UserEncoder] a new instance of UserEncoder
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_encoder.rb#11
  def initialize; end

  # Encodes a user for given scope into a JWT.
  #
  # Payload generated includes:
  #
  # - a `sub` claim which is build calling `jwt_subject` in `user`
  # - an `aud` claim taken as it is in the `aud` parameter
  # - a custom `scp` claim taken as the value of the `scope` parameter
  # as a string.
  #
  # The result of calling `jwt_payload` in user is also merged
  # into the payload.
  #
  # @param user [Interfaces::User] an user, whatever it is
  # @param scope [Symbol] Warden scope
  # @param aud [String] JWT aud claim
  # @return [String, String] encoded JWT and decoded payload
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_encoder.rb#31
  def call(user, scope, aud); end

  # Returns the value of attribute helper.
  #
  # source://warden-jwt_auth//lib/warden/jwt_auth/user_encoder.rb#9
  def helper; end
end

# source://warden-jwt_auth//lib/warden/jwt_auth/version.rb#5
Warden::JWTAuth::VERSION = T.let(T.unsafe(nil), String)
